SubDir FUSION_TOP src kits tracker ;

AddSubDirSupportedPlatforms libbe_test ;

UseHeaders [ FDirName $(FUSION_TOP) src add-ons input_server filters shortcut_catcher ] ;
UsePrivateHeaders interface mount shared storage support tracker ;
UsePrivateSystemHeaders ;

SubDirC++Flags
	-D_BUILDING_tracker=1
#	-D_INCLUDES_CLASS_DEVICE_MAP=1
	-D_SUPPORTS_RESOURCES=1
#	-D_SILENTLY_CORRECT_FILE_NAMES=1
	;

local architectureObject ;
for architectureObject in [ MultiArchSubDirSetup ] {
	on $(architectureObject) {
		local libtracker = [ MultiArchDefaultGristFiles libtracker.so ] ;
		AddResources $(libtracker) : TrackerIcons.rdef libtracker.rdef ;

		SEARCH_SOURCE += [ FDirName $(FUSION_TOP) src add-ons input_server
			filters shortcut_catcher ] ;
		SEARCH_SOURCE += [ FDirName $(FUSION_TOP) src kits tracker infowindow ] ;

		SharedLibrary $(libtracker) :
			AttributeStream.cpp
			AttributesView.cpp
			AutoMounterSettings.cpp
			BackgroundImage.cpp
			Bitmaps.cpp
			ContainerWindow.cpp
			CountView.cpp
			DeskWindow.cpp
			DesktopPoseView.cpp
			DialogPane.cpp
			DirMenu.cpp
			EntryIterator.cpp
			FBCPadding.cpp
			FSClipboard.cpp
			FSUndoRedo.cpp
			FSUtils.cpp
			FavoritesMenu.cpp
			FilePanel.cpp
			FilePanelPriv.cpp
			FilePermissionsView.cpp
			FindPanel.cpp
			GeneralInfoView.cpp
			GroupedMenu.cpp
			HeaderView.cpp
			IconCache.cpp
			IconMenuItem.cpp
			InfoWindow.cpp
			MimeTypeList.cpp
			MiniMenuField.cpp
			Model.cpp
			MountMenu.cpp
			Navigator.cpp
			NavMenu.cpp
			NodePreloader.cpp
			NodeWalker.cpp
			OpenWithWindow.cpp
			OverrideAlert.cpp
			PendingNodeMonitorCache.cpp
			Pose.cpp
			PoseList.cpp
			PoseView.cpp
			PoseViewScripting.cpp
			QueryContainerWindow.cpp
			QueryPoseView.cpp
			RecentItems.cpp
			RegExp.cpp
			SelectionWindow.cpp
			Settings.cpp
			SettingsViews.cpp
			SlowContextPopup.cpp
			SlowMenu.cpp
			StatusWindow.cpp
			TaskLoop.cpp
			TemplatesMenu.cpp
			Tests.cpp
			TextWidget.cpp
			TitleView.cpp
			Tracker.cpp
			TrackerInitialState.cpp
			TrackerScripting.cpp
			TrackerSettings.cpp
			TrackerSettingsWindow.cpp
			TrackerString.cpp
			TrashWatcher.cpp
			Utilities.cpp
			ViewState.cpp
			VirtualDirectoryEntryList.cpp
			VirtualDirectoryManager.cpp
			VirtualDirectoryPoseView.cpp
			VirtualDirectoryWindow.cpp
			WidgetAttributeText.cpp

			:
			be localestub shared translation
			[ TargetLibstdc++ ] [ TargetLibsupc++ ]
			[ MultiArchDefaultGristFiles libcolumnlistview.a ]
			[ MultiArchDefaultGristFiles libshortcuts_shared.a ]
			;
	}
}

SEARCH_SOURCE += [ FDirName $(FUSION_TOP) src kits tracker infowindow ] ;

DoCatalogs libtracker.so :
	x-vnd.Haiku-libtracker
	:
	Tracker.cpp
	AttributesView.cpp
	AutoMounterSettings.cpp
	ContainerWindow.cpp
	CountView.cpp
	DeskWindow.cpp
	DirMenu.cpp
	FavoritesMenu.cpp
	FilePanelPriv.cpp
	FilePermissionsView.cpp
	FindPanel.cpp
	FSClipboard.cpp
	FSUtils.cpp
	GeneralInfoView.cpp
	InfoWindow.cpp
	LocalizedFolders.h
	Model.cpp
	MountMenu.cpp
	NavMenu.cpp
	OpenWithWindow.cpp
	PoseView.cpp
	QueryContainerWindow.cpp
	QueryPoseView.cpp
	RegExp.cpp
	SelectionWindow.cpp
	SettingsViews.cpp
	SlowContextPopup.cpp
	StatusWindow.cpp
	TemplatesMenu.cpp
	TextWidget.cpp
	Tracker.cpp
	TrackerInitialState.cpp
	TrackerSettingsWindow.cpp
	WidgetAttributeText.cpp
;


if $(TARGET_PLATFORM) = libbe_test {
	HaikuInstall install-test-apps : $(HAIKU_APP_TEST_LIB_DIR) : libtracker.so
		: tests!apps ;
}
