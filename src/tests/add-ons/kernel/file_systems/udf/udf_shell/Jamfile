SubDir FUSION_TOP src tests add-ons kernel file_systems udf udf_shell ;

SEARCH_SOURCE += [ FDirName $(FUSION_TOP) src add-ons kernel file_systems udf ] ;

# prevent inclusion of HaikuBuildCompatibility.h
DEFINES += HAIKU_BUILD_COMPATIBILITY_H ;

# set some additional defines
{
	local defines =
		FS_SHELL
		;

	if $(TARGET_PACKAGING_ARCH) = x86_gcc2 {
		# GCC2 doesn't compile BFS correctly with -O2 or more
		OPTIM = -O1 ;
	}

	defines = [ FDefines $(defines) ] ;
	SubDirCcFlags $(defines) -Wno-multichar ;
	SubDirC++Flags $(defines) -Wno-multichar -fno-rtti ;
}

# platform specific libraries
local fsShellCommandLibs ;
if ! $(HOST_PLATFORM_HAIKU_COMPATIBLE) {
	fsShellCommandLibs = $(HOST_NETWORK_LIBS) ;
}

UseHeaders [ FDirName $(FUSION_TOP) headers build ] : true ;

if ! $(HOST_PLATFORM_HAIKU_COMPATIBLE) {
	UseHeaders [ FDirName $(FUSION_TOP) headers build os ] : true ;
	UseHeaders [ FDirName $(FUSION_TOP) headers build os support ] : true ;
}

UsePrivateHeaders shared storage ;
UsePrivateHeaders fs_shell ;
UseHeaders [ FDirName $(FUSION_TOP) headers private ] : true ;
UseHeaders [ FDirName $(FUSION_TOP) src tools fs_shell ] ;

BuildPlatformMain <build>udf_shell
	:
	crc_table.cpp
	DString.cpp
	Icb.cpp
	MetadataPartition.cpp
	PhysicalPartition.cpp
	Recognition.cpp
	SparablePartition.cpp
	UdfDebug.cpp
	UdfString.cpp
	UdfStructures.cpp
	Utils.cpp
	VirtualPartition.cpp
	Volume.cpp
	kernel_interface.cpp
	:
	<build>fs_shell.a $(HOST_LIBSUPC++) $(HOST_LIBSTDC++)
	$(HOST_LIBROOT) $(fsShellCommandLibs)
;
