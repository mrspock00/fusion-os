SubDir HAIKU_TOP src tests kits app bapplication testapps ;

AddSubDirSupportedPlatforms libbe_test ;

SubDirHdrs [ FDirName $(HAIKU_TOP) src tests kits app common ] ;

local commonObjects = <src!tests!kits!app!common>CommonTestApp.o ;

rule SimpleBAppTestApp
{
	# SimpleBAppTestApp <sources> : <resources> : <use objects> ;
	local sources = $(1) ;
	local resources = $(2) ;
	local useObjects = $(3) ;
	local name = $(sources[1]) ;
	name = $(name:B) ;
	SimpleBAppTestApp2 $(name) : $(sources) : $(resources) : $(useObjects) ;
}

rule SimpleBAppTestApp2
{
	# SimpleBAppTestApp2 <name> : <sources> : <resources> : <use objects> ;
	local name = $(1) ;
	local sources = $(2) ;
	local resources = $(3) ;
	local useObjects = $(4) ;

	UnitTest $(name)
		: $(sources)
		: be [ TargetLibstdc++ ] $(useObjects)
		: $(resources)
	;
}

rule CopyBAppTestApp
{
	# CopyBAppTestApp  <target> : <source> ;
	local target = $(1) ;
	local source = $(2) ;

	MakeLocate $(target) : $(TARGET_UNIT_TEST_DIR) ;
	File $(target) : $(source) ;
	MODE on $(target) = $(EXEMODE) ;
	MimeSet $(target) ;

	UnitTestDependency $(target) ;
}

# BApplication::BApplication() test apps
#

SimpleBAppTestApp BApplicationTestApp1.cpp ;
SimpleBAppTestApp BApplicationTestApp1a.cpp ;
SimpleBAppTestApp BApplicationTestApp1b.cpp ;
SimpleBAppTestApp BApplicationTestApp2.cpp ;
SimpleBAppTestApp BApplicationTestApp2a.cpp ;
SimpleBAppTestApp BApplicationTestApp2b.cpp ;
SimpleBAppTestApp BApplicationTestApp3.cpp ;
SimpleBAppTestApp BApplicationTestApp3a.cpp ;
SimpleBAppTestApp BApplicationTestApp3b.cpp ;
SimpleBAppTestApp BApplicationTestApp4.cpp : BApplicationTestApp4.rdef ;
SimpleBAppTestApp BApplicationTestApp4a.cpp : BApplicationTestApp4.rdef ;
SimpleBAppTestApp BApplicationTestApp4b.cpp : BApplicationTestApp4.rdef ;
SimpleBAppTestApp BApplicationTestApp5.cpp : BApplicationTestApp5.rdef ;
SimpleBAppTestApp BApplicationTestApp5a.cpp : BApplicationTestApp5.rdef ;
SimpleBAppTestApp BApplicationTestApp5b.cpp : BApplicationTestApp5.rdef ;


# BApplication::Run() test apps
#

local runTestApp1 = [ FGristFiles AppRunTestApp1$(SUFOBJ) ] ;

SimpleBAppTestApp AppRunTestApp1.cpp : AppRunTestApp1.rdef
				   : $(commonObjects) ;
SimpleBAppTestApp2 AppRunTestApp2 : $(runTestApp1) : AppRunTestApp2.rdef
				   : $(commonObjects) ;
SimpleBAppTestApp2 AppRunTestApp3 : $(runTestApp1) : AppRunTestApp3.rdef
				   : $(commonObjects) ;
SimpleBAppTestApp2 AppRunTestApp4 : $(runTestApp1) : AppRunTestApp4.rdef
				   : $(commonObjects) ;
SimpleBAppTestApp2 AppRunTestApp5 : $(runTestApp1) : AppRunTestApp5.rdef
				   : $(commonObjects) ;
SimpleBAppTestApp2 AppRunTestApp6 : $(runTestApp1) : AppRunTestApp6.rdef
				   : $(commonObjects) ;

CopyBAppTestApp AppRunTestApp3a : AppRunTestApp3 ;
CopyBAppTestApp AppRunTestApp4a : AppRunTestApp4 ;
CopyBAppTestApp AppRunTestApp5a : AppRunTestApp5 ;
CopyBAppTestApp AppRunTestApp6a : AppRunTestApp6 ;


# BApplication::Quit() test apps
#

SimpleBAppTestApp AppQuitTestApp1.cpp : : $(commonObjects) ;
SimpleBAppTestApp AppQuitTestApp2.cpp : : $(commonObjects) ;
SimpleBAppTestApp AppQuitTestApp3.cpp : : $(commonObjects) ;
SimpleBAppTestApp AppQuitTestApp4.cpp : : $(commonObjects) ;


# BApplication::QuitRequested() test apps
#

SimpleBAppTestApp AppQuitRequestedTestApp1.cpp : : $(commonObjects) ;
